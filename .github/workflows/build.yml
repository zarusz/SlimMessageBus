# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: build

on:
  push:
    branches: ["master", "release/*", "feature/*"]
  pull_request_target:
    branches: ["master", "devops/*"]
  workflow_dispatch:
    branches: ["master", "release/*", "feature/*"]

permissions:
  contents: read

env:
  SOLUTION_NAME: SlimMessageBus.sln
  SOLUTION_CONFIGURATION: Release

jobs:
  build:
    runs-on: ubuntu-latest
    concurrency: int-tests

    steps:
      # - name: Dump GitHub context
      #   env:
      #     GITHUB_CONTEXT: ${{ toJson(github) }}
      #   run: echo "$GITHUB_CONTEXT"

      - name: PR - Checkout
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      # - name: PR - Create Branch
      #   if: github.event_name == 'pull_request_target'
      #   env:
      #     GITHUB_REF: ${{ secrets.GITHUB_REF }}
      #   run: |
      #     git branch new-branch
      #     git push origin new-branch -f
      #     echo GITHUB_REF: ${GITHUB_REF}

      - name: Checkout
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore $SOLUTION_NAME
        working-directory: ./src

      - name: Install Coverlet
        run: find . -name "*.Test.csproj" | xargs -t -I {} dotnet add {} package coverlet.collector
        working-directory: ./src

      - name: SonarCloud - Setup Java17
        #if: github.event_name == 'pull_request_target'
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      - name: SonarCloud - Install SonarCloud scanner
        #if: github.event_name == 'pull_request_target'
        run: dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: SonarCloud - SonarScanner Begin
        #if: github.event_name == 'pull_request_target'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          params=""
          pr_number="${{ github.event.pull_request.number }}"
          if [[ -n "$pr_number" ]]; then
              params="/d:sonar.pullrequest.key=${pr_number}"
          fi
          ../.sonar/scanner/dotnet-sonarscanner begin /k:"zarusz_SlimMessageBus" /o:"zarusz" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.exclusions="Samples/**/*,Tests/**/*" $params
        #run: ../.sonar/scanner/dotnet-sonarscanner begin /k:"zarusz_SlimMessageBus" /o:"zarusz" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.exclusions="Samples/**/*,Tests/**/*" /d:sonar.pullrequest.key="${{ github.event.pull_request.number }}" /d:sonar.pullrequest.branch="new-branch"
        working-directory: ./src

      - name: Build
        run: dotnet build $SOLUTION_NAME --configuration $SOLUTION_CONFIGURATION --no-restore
        working-directory: ./src

      - name: Unit Tests
        run: dotnet test $SOLUTION_NAME --configuration $SOLUTION_CONFIGURATION --no-build --verbosity normal --logger html --results-directory TestResults --collect:"XPlat Code Coverage;Format=opencover" --filter Category!=Integration
        working-directory: ./src

      - name: Integrations Tests
        # Run integration tests against the test infrastructure if secrets are provided
        run: dotnet test $SOLUTION_NAME --configuration $SOLUTION_CONFIGURATION --no-build --verbosity normal --logger html --results-directory TestResults --collect:"XPlat Code Coverage;Format=opencover" --filter Category=Integration
        working-directory: ./src
        env:
          azure_servicebus_key: ${{ secrets.azure_servicebus_key }}
          azure_eventhub_key: ${{ secrets.azure_eventhub_key }}
          azure_eventhub_storage_key: ${{ secrets.azure_eventhub_storage_key }}
          azure_sql_password: ${{ secrets.azure_sql_password }}
          kafka_username: ${{ secrets.kafka_username }}
          kafka_password: ${{ secrets.kafka_password }}
          redis_password: ${{ secrets.redis_password }}
          mqtt_password: ${{ secrets.mqtt_password }}
          rabbitmq_password: ${{ secrets.rabbitmq_password }}

      - name: SonarCloud - SonarScanner End
        #if: github.event_name == 'pull_request_target'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ../.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        working-directory: ./src

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-results
          path: ./src/TestResults
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
      - name: Copy NuGet packages
        shell: bash
        run: |
          mkdir ./dist
          find -name "*.nupkg" -exec cp {} ./dist \;
          find ./dist
      - name: Archive NuGet packages
        uses: actions/upload-artifact@v3
        with:
          name: nuget-packages
          path: "./dist"
