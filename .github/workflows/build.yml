# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: build

on:
  push:
    branches: ["master", "release/*", "feature/*"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:
    branches: ["master", "release/*", "feature/*"]

env:
  SOLUTION_NAME: SlimMessageBus.sln
  SOLUTION_CONFIGURATION: Release

jobs:
  build:
    runs-on: ubuntu-latest
    concurrency: int-tests

    steps:
      - uses: actions/checkout@v3
      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarcloud-github-action@master
      #   with:
      #     projectBaseDir: src
      #     args: >
      #       -Dsonar.organization=zarusz
      #       -Dsonar.projectKey=zarusz_SlimMessageBus
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Install SonarCloud scanner
        run: |
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Restore dependencies
        run: dotnet restore $SOLUTION_NAME
        working-directory: ./src

      - name: SonarScanner Begin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: .\.sonar\scanner\dotnet-sonarscanner begin /k:"zarusz_SlimMessageBus" /o:"zarusz" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
      #         dotnet build .\src\$SOLUTION_NAME --configuration $SOLUTION_CONFIGURATION
      #         .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Build
        run: dotnet build $SOLUTION_NAME --configuration $SOLUTION_CONFIGURATION --no-restore
        working-directory: ./src
      - name: Unit Tests
        run: dotnet test $SOLUTION_NAME --configuration $SOLUTION_CONFIGURATION --no-build --verbosity normal --logger html --results-directory TestResults --filter Category!=Integration
        working-directory: ./src

        # - name: Dump GitHub context
      #   env:
      #     GITHUB_CONTEXT: ${{ toJson(github) }}
      #   run: echo "$GITHUB_CONTEXT"
      # Run integration tests against the test infrastructure if secrets are provided

      - name: SonarScanner End
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Integrations Tests
        if: "${{ env.azure_servicebus_key != '' }}"
        run: dotnet test $SOLUTION_NAME --configuration $SOLUTION_CONFIGURATION --no-build --verbosity normal --logger html --results-directory TestResults --filter Category=Integration
        working-directory: ./src
        env:
          azure_servicebus_key: ${{ secrets.azure_servicebus_key }}
          azure_eventhub_key: ${{ secrets.azure_eventhub_key }}
          azure_eventhub_storage_key: ${{ secrets.azure_eventhub_storage_key }}
          azure_sql_password: ${{ secrets.azure_sql_password }}
          kafka_username: ${{ secrets.kafka_username }}
          kafka_password: ${{ secrets.kafka_password }}
          redis_password: ${{ secrets.redis_password }}
          mqtt_password: ${{ secrets.mqtt_password }}
          rabbitmq_password: ${{ secrets.rabbitmq_password }}
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-results
          path: ./src/TestResults
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
      - name: Copy NuGet packages
        shell: bash
        run: |
          mkdir ./dist
          find -name "*.nupkg" -exec cp {} ./dist \;
          find ./dist
      - name: Archive NuGet packages
        uses: actions/upload-artifact@v3
        with:
          name: nuget-packages
          path: "./dist"
  # analyze:
  #   name: Build and analyze
  #   runs-on: windows-latest
  #   steps:
  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: 17
  #         distribution: "zulu" # Alternative distribution options are available.
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
  #     - name: Cache SonarCloud packages
  #       uses: actions/cache@v3
  #       with:
  #         path: ~\sonar\cache
  #         key: ${{ runner.os }}-sonar
  #         restore-keys: ${{ runner.os }}-sonar
  #     - name: Cache SonarCloud scanner
  #       id: cache-sonar-scanner
  #       uses: actions/cache@v3
  #       with:
  #         path: .\.sonar\scanner
  #         key: ${{ runner.os }}-sonar-scanner
  #         restore-keys: ${{ runner.os }}-sonar-scanner
  #     - name: Install SonarCloud scanner
  #       if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
  #       shell: powershell
  #       run: |
  #         New-Item -Path .\.sonar\scanner -ItemType Directory
  #         dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
  #     - name: Build and analyze
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       shell: powershell
  #       run: |
  #         .\.sonar\scanner\dotnet-sonarscanner begin /k:"zarusz_SlimMessageBus" /o:"zarusz" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
  #         dotnet build .\src\$SOLUTION_NAME --configuration $SOLUTION_CONFIGURATION
  #         .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
